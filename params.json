{"name":"Array-set","tagline":"array, set, array as set, javascript, union, intersection, difference, exclusion","body":"Arrays as Sets\r\n========\r\n#### Micro-implementation of the basic operations in Set Theory applied on Javascript arrays.\r\n\r\nUsing arrays as logical sets, or as groups of similar elements, is extremely common and often requires the use of set operations. Unfortunately such operations have not found yet place in the current version of ECMAScript (ES5).\r\n\r\nLuckily their implementation requires just a few lines of code, not nearly enough to make it worth creating a library or a module.  \r\n\r\nIf you need to use the operations for more than two arrays the following rules apply: \r\n\r\nA ∪ B ∪ C = A ∪ (B ∪ C) = (A ∪ B) ∪ C\r\n\r\nA ∩ B ∩ C =  A ∩ (B ∩ C) = (A ∩ B) ∩ C\r\n\r\n\r\n<br/>Live demo at: <a href='http://jsfiddle.net/swogger/4gpDB/3/' target='_blank'>jsfiddle.net/swogger/4gpDB/3/</a>\r\n\r\n-------\r\n\r\n\r\nUnion\r\n--------\r\n\r\n\r\n![Union Operation](http://upload.wikimedia.org/wikipedia/commons/3/30/Venn0111.svg \"Union Operation\")\r\n\r\n##### Merging two arrays/sets into one without duplicating elements.\r\n\r\nOften merging two or more arrays into one is required. Unfortunately the native implementation Array.prototype.concat() preserves the duplicate values both arrays have in common, which requires more code to be resolved. Union takes care of that. \r\n#####Code:\r\n```javascript\r\nvar fruit = ['apple', 'banana', 'lemon', 'lime', 'pear'];\r\nvar sweet = ['icecream', 'banana', 'honey', 'pear', 'sugar', 'apple'];\r\nvar result = union(fruit, sweet);\r\n```\r\n#####Preview:\r\n```\r\nFruit Set: apple, banana, lemon, lime, pear\r\nSweet Set: icecream, banana, honey, pear, sugar, apple\r\nResult Set: apple, banana, lemon, lime, pear, icecream, honey, sugar\r\n```\r\n\r\n\r\nDifference (Relative Complement)\r\n--------\r\n\r\n\r\n<img src='http://upload.wikimedia.org/wikipedia/commons/e/e6/Venn0100.svg'/>\r\n\r\n##### Remove all elements from array/set 1 that have equivalent in array/set 2.\r\n#####Code:\r\n```javascript\r\nvar fruit = ['apple', 'banana', 'lemon', 'lime', 'pear'];\r\nvar sweet = ['icecream', 'banana', 'honey', 'pear', 'sugar', 'apple'];\r\nvar result = difference(fruit, sweet);\r\n```\r\n#####Preview:\r\n```\r\nFruit Set: apple, banana, lemon, lime, pear\r\nSweet Set: icecream, banana, honey, pear, sugar, apple\r\nResult Set: lemon, lime\r\n```\r\n\r\n\r\n\r\n\r\nIntersection\r\n--------\r\n\r\n\r\n<img src='http://upload.wikimedia.org/wikipedia/commons/9/99/Venn0001.svg'/>\r\n\r\n##### Returns only the elements both arrays/sets have in common.\r\n#####Code:\r\n```javascript\r\nvar fruit = ['apple', 'banana', 'lemon', 'lime', 'pear'];\r\nvar sweet = ['icecream', 'banana', 'honey', 'pear', 'sugar', 'apple'];\r\nvar result = intersection(fruit, sweet);\r\n```\r\n#####Preview:\r\n```\r\nFruit Set: apple, banana, lemon, lime, pear\r\nSweet Set: icecream, banana, honey, pear, sugar, apple\r\nResult Set: apple, banana, pear\r\n```\r\n\r\n\r\n\r\n\r\nExclusion (Symmetric Difference)\r\n-------- \r\n\r\n\r\n<img src='http://upload.wikimedia.org/wikipedia/commons/4/46/Venn0110.svg'/>\r\n\r\n##### Returns the elements from both arrays that they did NOT have in common.\r\n#####Code:\r\n```javascript\r\nvar fruit = ['apple', 'banana', 'lemon', 'lime', 'pear'];\r\nvar sweet = ['icecream', 'banana', 'honey', 'pear', 'sugar', 'apple'];\r\nvar result = exclusion(fruit, sweet);\r\n```\r\n#####Preview:\r\n```\r\nFruit Set: apple, banana, lemon, lime, pear\r\nSweet Set: icecream, banana, honey, pear, sugar, apple\r\nResult Set: lemon, lime, icecream, honey, sugar\r\n```\r\n\r\n<br/>\r\n\r\n###Thanks for reading! \r\n*Feedback always welcome.*\r\ndimtiar.kazakov@gmail.com","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}